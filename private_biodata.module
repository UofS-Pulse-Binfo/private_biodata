<?php
/**
 * @file
 * The main functionality for the module.
 */
require_once('includes/TripalFields/private_biodata.fields.inc');

 /**
  * Implements hook_permission().
  */
 function private_biodata_permission() {
   $permissions = [];

   // Add 'View Private' permissions for each content type.
   $bundles = tripal_get_content_types();
   foreach ($bundles as $bundle) {
     $permissions['view private ' . $bundle->name] = array(
       'title' => t('%label: View Private Content', array('%label' => $bundle->label)),
       'description' => t('Allow the user to view private %label content. Content is indicated to be private using the "Private Tripal Content" field.', array('%label' => $bundle->label)),
     );
   }

   return $permissions;
 }

 /**
  * Implements hook_TripalEntity_access().
  */
 function private_biodata_TripalEntity_access($entity, $op, $account) {

   // We only care about viewing.
   if ($op == 'view') {

     if (is_numeric($entity)) {
       $entity_id = $entity;
       $entity_results = entity_load('TripalEntity', [$entity_id]);
       $entity = $entity_results[$entity_id];
     }
     else {
       $entity_id = $entity->id;
     }

     // We also only care if this entity is private...
     $is_private = db_query('SELECT private FROM {private_biodata}
       WHERE entity_id=:id',
       [':id' => $entity_id])->fetchField();

      // If we have it marked as private...
     if ($is_private) {
       // then return the custom permission provided by this module.
       return user_access('view private ' . $entity->bundle, $account);
     }
     // Otherwise, this entity should follow the typical Tripal permissions.
     else {
       // Ensure that the current user has the
       // 'view [bundle_name]' permission which was set-up by core Tripal.
       return user_access('view ' . $entity->bundle, $account);
     }
   }
 }
